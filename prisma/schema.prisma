// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  news
  video
}

model Media {
  id   String @id @default(uuid())
  title       String
  imageURL       String?
  link      String
  publisher String
  uploadedAt     DateTime @db.Timestamptz(3)
  type MediaType
  order     Int   @default(0)
  createdAt           DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model Portfolio {
  id              String @id @default(uuid())
  order     Int   @default(0)
  location        String
  model           String
  size            Int
  images          String[]
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model Faq {
  id              String @id @default(uuid())
  question        String
  answer          String
  createdAt       DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model Model {
  id              String @id @default(uuid())
  order     Int   @default(0)
  representativeImageURL  String?
  name            String
  description     String   @default("")
  minPrice        Int

  size            String    @default("")
  sizeDetail      String    @default("-")
  exteriorMaterial  String[]
  insulation      String    @default("")
  structure       String   @default("")
  windows         String[]
  furniture         String[]
  purpose         String[]
  purposeDetail         String[]
  


  createdAt       DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
  
  modelColors     ModelColor[]
  modelFirstOptions     ModelFirstOption[]
  modelExamples     ModelExample[]
}

model ModelFirstOption {
  id              String @id @default(uuid())
  order           Int         @default(0)
  name            String      @default("")
  isDefault       Boolean     @default(false)
  modelSecondOptions     ModelSecondOption[]

  modelIdSubstitude    String    @default("") // admin.js/relation can not find "modelId". so manually added for admin feature
  modelId     String
  Model Model @relation(fields: [modelId], references: [id])     
}

model ModelSecondOption {
  id              String @id @default(uuid())
  order           Int         @default(0)
  name            String
  isMultipleSelectable  Boolean @default(false)
  optionDetails   OptionDetail[]            
  
  modelFirstOptionIdSubstitude    String    @default("") // admin.js/relation can not find "modelFirstOptionId". so manually added for admin feature
  modelFirstOptionId     String
  ModelFirstOption ModelFirstOption @relation(fields: [modelFirstOptionId], references: [id])     
}

model OptionDetail {
  id              String @id @default(uuid())
  order           Int         @default(0)
  name            String
  price           Int
  isDefault       Boolean   @default(false)
  
  modelSecondOptionIdSubstitude    String    @default("") // admin.js/relation can not find "ModelSecondOptionId". so manually added for admin feature
  ModelSecondOptionId     String
  ModelSecondOption ModelSecondOption @relation(fields: [ModelSecondOptionId], references: [id])     
}

model ModelColor {
  id              String @id @default(uuid())
  order     Int   @default(0)
  imageURL  String?
  colorId   String
  name      String
  modelIdSubstitude    String    @default("") // admin.js/relation can not find "modelId". so manually added for admin feature
  modelId     String
  Model Model @relation(fields: [modelId], references: [id])
}

model ModelExample {
  id              String @id @default(uuid())
  order     Int   @default(0)
  address   String
  imageURL  String?
  modelIdSubstitude    String    @default("") // admin.js/relation can not find "modelId". so manually added for admin feature
  modelId     String
  Model Model @relation(fields: [modelId], references: [id])
}

model Admin {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String
  salt            String
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}

model Reputation {
  id              String        @id @default(uuid())
  order     Int   @default(0)
  imageURL        String?
  title           String
  content         String
  writenAt        DateTime
  createdAt       DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @updatedAt @db.Timestamptz(3)
}